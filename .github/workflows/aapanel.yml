parameters:
    - name: environment
      displayName: Environment
      type: string
      default: NONE
      values:
          - A
          # - Dev
          - Int
          - QA
          - NONE
    - name: skipTests
      displayName: Skip Tests
      type: boolean
      default: false
    -name: branch
      displayName: Branch
      type: string
      default: main

pool:
  vmImage: ubuntu-latest

trigger:
  branches:
    include:
      - ${{ parameters.branch }}
    exclude:
      - ${{ parameters.branch }}-deploy

variables:
  data.build.id: $(Build.BuildId)
  data.build.number: $(Build.BuildNumber)
  data.build.time: $(System.PipelineStartTime)
  data.git.branch: $[replace(coalesce(variables['System.PullRequest.SourceBranch'], variables['Build.SourceBranchName']), 'refs/heads/', '')]
  data.git.sha: $(Build.SourceVersion)
  data.git.author: $(Build.SourceVersionAuthor)
  ARCHIVE_FILE: "$(ARCHIVE_NAME).zip"
  ARCHIVE_NAME: "$(Build.Repository.Name)-$(Build.BuildId)"
  ARCHIVE_PATH: "$(RELEASE_FOLDER)/$(ARCHIVE_NAME)"
  CI: true
  COMPOSER_CACHE_DIR: $(Pipeline.Workspace)/.composer
  COMPOSER_DISABLE_XDEBUG_WARN: 1
  RELEASE_FOLDER: "releases"
  RELEASE_PATH: $(USER_HOME)/$(RELEASE_FOLDER)
  Environment: ${{ parameters.environment }}

  stages:
    - stage: Build
      jobs:
        - job: Build
          steps:
            - checkout: self
              persistCredentials: true
              fetchDepth: 0

            - task: Cache@2
              inputs:
                key: composer
                path: $(USER_HOME)/.composer
                restoreKeys: |
                composer  | $(Agent.OS)
                composer
              path: $(COMPOSER_CACHE_DIR)
              cacheHitVar: COMPOSER_CACHE_RESTORED
            enabled: true
            displayName: "Restore Cached Composer Packages"

          - script: composer install --ignore-platform-reqs --no-interaction --prefer-dist --no-dev --optimize-autoloader --no-scripts
            displayName: "composer install"

          - task: DeleteFiles@1
            displayName: "Remove unneeded files"
            inputs:
              Contents: |
                .env.docker
                .git
                .gitignore
                .vscode
                *.md
                **/vendor/**/docs/**
                **/vendor/**/test/**
                **/vendor/**!(Illuminate)/Testing/**
                **/vendor/**/Tests/**

            - task: ArchiveFiles@2
              displayName: "Archive Files"
              inputs:
                rootFolderOrFile: $(Build.SourcesDirectory)
                includeRootFolder: false
                archiveType: zip
                archiveFile: $(ARCHIVE_PATH)
                replaceExistingArchive: true

            - task: PublishBuildArtifacts@1
              displayName: "Publish Build Artifacts"
              inputs:
                PathtoPublish: $(RELEASE_PATH)
                ArtifactName: $(ARCHIVE_NAME)
                publishLocation: 'pipeline'

              
